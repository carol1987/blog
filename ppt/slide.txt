效果讲解
说明: [] 包括表示在可视区域


滚动效果

向左移动处理:
  最初状态：
    [ 1 2 3 4 5 6 ] 7 8 9
  点击 8, 滚动[效果] 完以后为:
    1 2 [ 3 4 5 6 7 8 ] 9
  为了通用效果(移动和衔接), 直接把 1 2 后移:
    [ 3 4 5 6 7 8 ] 9 1 2
向右移动处理:
  假设最初状态：
    [ 3 4 5 6 7 8 ] 9 1 2
  点击向右移动:
    状态应该为: [ 2 3 4 5 6 7 ] 8 9 1
    但是此时 2 在最后, 因此做调整:
      2 [ 3 4 5 6 7 8 ] 9 1
    向右移动:
      [ 2 3 4 5 6 7 ] 8 9 1

总结:
  * 先调整位置, 再有移动效果.
  * 效果是直接移动容器元素来实现的 - 一般调整 margin 值.
  * 移动 DOM 节点后, 需要对父容器 margin 做一次修正 - 还原到最初状态(margin -> 0).
  * 移动节点和设置 css 瞬间完成 - 需要移除 transition 属性



  
点击切换效果

最初状态：
[ 1 2 3 4 5 6 ] 7 8 9

点击 1-6 时, 直接高亮就行.
点击 7-9 时,
  7: 要移动一位 [ 2 3 4 5 6 7 ] 8 9 1
  8: 要移动两位 [ 3 4 5 6 7 8 ] 9 1 2
  9: 要移动三位 [ 4 5 6 7 8 9 ] 1 2 3
  移动的位数计算: n - K, 其中 n 表示点击的数字(7/8/9), K 表示可视化区域个数(这里是 6)

以上都是在初始状态下计算的. 但有可能不在初始状态下,
比如, 用户已经点击了 7, 此时状态为 [ 2 3 4 5 6 7 ] 8 9 1
再点击 9 时, 状态应该是 [ 4 5 6 7 8 9 ] 1 2 3, 即在点击 7 后的状态下, 只需要移动 2 位(而不是最初状态下的 3 位)

因此, 为了通用, 做如下调整：
设置: 永远只有一个状态, 即  [ a{1} b{2} c{3} d{4} e{5} f{6} ] g{7} h{8} i{9}; 这里{9} 表示 id 为 9;

在计算移动的位数之前, 对真正需要处理的索引做修正, 即：
* 点击 8 时, 我们找 id 为 8 的元素在第几位, 这里是 8, 同上面计算一样, 得到需要移动 2 位;
  得到状态为  [ c{3} d{4} e{5} f{6} g{7} h{8} ] i{9} a{1} b{2}.
* 再点击 9 时, 我们找 id 为 9 的元素在第几位, 这里是 7( c d e f g h i a b 中的 i 是第七个元素 )
  同上面的计算相同, 得到需要移动 1 位; 得到状态为 [ d{4} e{5} f{6} g{7} h{8} ] i{9} a{1} b{2} c{3}

确认移动的位数后, 需要把 dom 元素移动到后面. 以点击 8 为例, 流程：
1. 确定点击元素对应的索引 - $(box).find( 'li[id="' + id + '"]' ).index()
2. 计算移动位数, 结果为 2
3. 取最前面的 2 个元素 - $(box).find( 'li' ).toArray().slice( 0, 2 )
  说明：
    * $(box).find( 'li' ) 找到所有的子元素
    * jQuery 数组对象是没有 slice 方法的, 因此使用 .toArray() 转化为真正的数组
    * 然后从开头取特定位数, 这里是 .slice( 0, 2 )
4. 把取出的结果放到 box 最后即可.